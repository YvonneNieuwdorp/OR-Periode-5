import numpy as np
import scipy.stats as sp
import matplotlib.pyplot as plt
import pandas as pd
from pulp import LpProblem, LpMinimize, LpVariable, lpSum, LpStatus, value

# project 5 OR 
#all_sheets = pd.read_excel(r"C:\Users\Fleur\Documents\Visual Studio Code\OperationsResearch\OperationsResearch\PaintShop_September_2024.xlsx", sheet_name=None)

# project 5 OR f
all_sheets = pd.read_excel("PaintShop - September 2024.xlsx", sheet_name=None)
print("Beschikbare sheets in het bestand:", list(all_sheets.keys()))
Orders = all_sheets['Orders']
Machines = all_sheets['Machines']
Setups = all_sheets['Setups'] 

print(Orders.head())

Orders = Orders.rename(columns={'Order': 'Order(O)'})
Orders = Orders.rename(columns={'Surface': 'Surface(s_o)'})
Orders = Orders.rename(columns={'Colour': 'Colour(Colour_o)'})
Orders = Orders.rename(columns={'Deadline': 'Deadline(d_o)'})
Orders = Orders.rename(columns={'Penalty': 'Penalty(c_o)'})

Setups = Setups.rename(columns={'Setup time': 'Setup_time(t_h1_h2)'})
Setups = Setups.rename(columns={'From colour': 'From colour(h1)'})
Setups = Setups.rename(columns={'To colour': 'To colour(h2)'})

Machines = Machines.rename(columns={'Machine': 'Machine(M)'})
Machines = Machines.rename(columns={'Speed': 'Speed(V_m)'})

# Berekeningen
M1 = Orders['Surface(s_o)'] / 20
M2 = Orders['Surface(s_o)'] / 25
M3 = Orders['Surface(s_o)'] / 18

# Zet de resultaten in een nieuwe DataFrame
P_o_m = pd.DataFrame({
    'M1': M1,
    'M2': M2,
    'M3': M3
})

# decision variables 
# machine_o = machine on wich order o is execuled.
# seqno  = sequence number of order o on maschine_o
# sequence_m = order in which orders o that are assigned to m are executed

# parameters:
# P_o_m = processing time van de order o op mashine m
# t_h1_h2 = set up time from h1 to h2
# e_pred_o = de tijd waarop het vorrige proces stopte (deze weet je mas als het model aan de gang is)
# d_o = deadline for order o
# derived variables:

# Create a dictionary for setup times
setups_dict = pd.Series(Setups['Setup_time(t_h1_h2)'].values, index=zip(Setups['From colour(h1)'], Setups['To colour(h2)'])).to_dict()

# Initialize start_times dictionary
start_times = {}

# Maak een optimalisatiemodel
model = LpProblem("Minimaliseer_Totale_Kosten", LpMinimize)

# Besluitvariabelen: seqno voor elke order
seqno = LpVariable.dicts("seqno", Orders['Order(O)'], lowBound=1, upBound=len(Orders), cat='Integer')

# Functie om de eindtijd te berekenen met de gegeven volgorde
def calculate_end_time_with_sequence(seqno):
    end_times = {}
    for order_name in sorted(Orders['Order(O)'], key=lambda x: seqno[x].varValue):
        start_time = get_start_time(order_name, Orders, end_times, setups_dict)
        processing_time = P_o_m.loc[Orders['Order(O)'] == order_name].values[0]
        end_time = start_time + processing_time
        end_times[order_name] = end_time
    return end_times

# Functie om de voorganger van een order te bepalen (zoals eerder)
def get_predecessor(order_name, orders):
    order = orders[order_name]
    machine = order['machine']
    seqno = order['seqno']
    
    if seqno == 1:
        return None
    else:
        for o, info in orders.items():
            if info['machine'] == machine and info['seqno'] == seqno - 1:
                return o
        return None

# Functie om de starttijd van een order te bepalen (b_o)
def get_start_time(order_name, orders, end_times, setup_times):
    # Controleer of de ordernaam bestaat
    if order_name not in orders['Order(O)'].values:
        print(f"Waarschuwing: Order(O) '{order_name}' bestaat niet in de orders.")
        return None

    order = orders.loc[orders['Order(O)'] == order_name].iloc[0]
    seqno = order['seqno']

    if seqno == 1:
        return 0
    else:
        pred_o = get_predecessor(order_name, orders)
        if pred_o is not None:
            e_pred_o = end_times.get(pred_o, 0)  # Gebruik .get om een fout te vermijden als de voorganger niet bestaat

            # Gebruik de juiste kolomnamen
            pred_colour = orders.loc[orders['Order(O)'] == pred_o, 'Colour'].values[0]
            current_colour = order['Colour']
            t_h1_h2 = setup_times.get((pred_colour, current_colour), 0)
            start_times = e_pred_o + t_h1_h2
            return start_times
        else:
            return None  # Dit zou niet moeten gebeuren als alles correct is

# Assuming the Orders DataFrame is indexed by order names (Order(O))
for order_name in Orders['Order(O)']:
    start_times[order_name] = get_start_time(order_name, Orders, start_times, setups_dict)
    
# Functie om de eindtijd van een order te berekenen
def calculate_end_time(order_name, start_times, processing_times):
    b_o = start_times[order_name]
    P_o_m = processing_times[order_name]
    return b_o + P_o_m

# Functie om de vertraging (lateness) van een order te berekenen
def calculate_lateness(order_name, end_time, deadline):
    return max(0, end_time - deadline)

# Functie om de totale schema-kosten te berekenen
def calculate_schedule_cost(orders, start_times, processing_times, setup_times):
    total_cost = 0
    for order_name, order_info in orders.items():
        # Bereken de eindtijd van de order
        e_o = calculate_end_time(order_name, start_times, processing_times)
        
        # Bereken de vertraging van de order
        d_o = order_info['Deadline(d_o)']  # Use the renamed column
        l_o = calculate_lateness(order_name, e_o, d_o)
        
        # Bereken de kosten voor deze order
        C_o = order_info['Penalty(c_o)']  # Use the renamed column
        total_cost += C_o * l_o
        
        # Optional: Print order details for debugging
        print(f"Order: {order_name}, Starttijd: {start_times[order_name]}, Eindtijd: {e_o}, Vertraging: {l_o}, Kosten: {C_o * l_o}")
    
    return total_cost

# Totale kosten van het schema berekenen
total_cost = calculate_schedule_cost(Orders, start_times, P_o_m, setups_dict)  # Ensure `setups_dict` is defined correctly
print(f"Totaal schema kosten: {total_cost}")

# Doelfunctie: minimaliseer de totale kosten
def total_cost_function():
    end_times = calculate_end_time_with_sequence(seqno)
    total_cost = 0
    for order_name in Orders['Order(O)']:
        d_o = Orders.loc[Orders['Order(O)'] == order_name, 'Deadline(d_o)'].values[0]
        l_o = calculate_lateness(order_name, end_times[order_name], d_o)
        penalty = Orders.loc[Orders['Order(O)'] == order_name, 'Penalty(c_o)'].values[0]
        total_cost += penalty * l_o
    return total_cost

# Voeg de kostenfunctie toe aan het model
model += lpSum(total_cost_function()), "Totale_Kosten"

# Voeg beperkingen toe, zoals dat de seqno uniek moet zijn
model += lpSum([seqno[order] for order in Orders['Order(O)']]) == len(Orders), "Unieke_Seqno"

# Los het model op
model.solve()

# Print de resultaten
print(f"Status: {LpStatus[model.status]}")
for order in Orders['Order(O)']:
    print(f"Order: {order}, Seqno: {seqno[order].varValue}")

# Totale kosten
optimal_total_cost = value(model.objective)
print(f"Optimale totale kosten: {optimal_total_cost}")

# Voorbeeld debug print in calculate_schedule_cost
print(f"Order: {order_name}, Starttijd: {start_times.get(order_name)}, Eindtijd: {e_o}, Vertraging: {l_o}, Kosten: {C_o * l_o}")

# pred_o = predecessor of order o on machine_o
#pred_o = ---                           if sequno_o = 1
#pred_o = sequence(machine_o,seqno_o-1) if sequno_o > 1

# b_o = start time order o
# b_o = 0                                if sequno_o = 1
# b_o = e_pred_o + t_h1_h2               if sequno_o > 1

# e_o = end time order o
# e_o = b_o + P_o_m

# l_o = lateness order o
# l_o = max{o, e_o-d_o}
# d_o = deadline for oder o

# schedual cost
# min sum(C_o*l_o, o) (sum(pentalty cost for order o in O * latness order)