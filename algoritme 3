import pandas as pd
import numpy as np
import scipy.stats as sp
import matplotlib.pyplot as plt
import time
import logging

Orders = pd.read_excel('PaintShop - September 2024.xlsx', sheet_name='Orders')
Machines = pd.read_excel('PaintShop - September 2024.xlsx', sheet_name='Machines')
Setups = pd.read_excel('PaintShop - September 2024.xlsx', sheet_name='Setups')

current_time_m1 = 0
current_time_m2 = 0
current_time_m3 = 0
scheduled_orders = []
available_orders = Orders.copy()
current_colour_m1 = None
current_colour_m2 = None
current_colour_m3 = None

def processing_time(ordernumber, number_of_machine):
    """ Functie die de processing time berekent
    Parameters: 
        - ordernummer, als een int
        - machine die gebruikt wordt, als een int
    Output: de tijd die nodig is om de order uit te voeren/processingtime
    """
    return Orders.loc[ordernumber, 'Surface']/ Machines.loc[number_of_machine, 'Speed']

def setup_time(prev_colour, new_colour):
    """ geeft de setuptime aan
    Parameters
        - previous color als een string
        - new color als een string
    Output: setup_time
    """
    result = Setups.loc[(Setups['From colour'] == prev_colour) & (Setups['To colour'] == new_colour), 'Setup time']
    if not result.empty:
        return result.values[0]
    else:
        return 0 

def nearest_neighbor(current_time_m1, current_time_m2,current_time_m3, available_orders, current_colour_m1, current_colour_m2,current_colour_m3):
    """ Berekent de oplossing die het dichtbij het meest optimaal is, gebaseerd op minimale kosten
    Parameters
        - current_time: huidige tijd
        - available_order: orders die nog beschikbaar zijn, niet uitgevoerd
        - current_colour: huidige kleur
    Output: order die in huidige reeks het meest optimaal is
    """
    best_order = None
    best_machine = None
    min_cost = float('inf')

    for index, order in available_orders.iterrows(): 
        time_to_finish_m1 = current_time_m1 + processing_time(index, 0)
        lateness_m1 = max(0, time_to_finish_m1 - order['Deadline'])
        cost_m1 = lateness_m1 * order['Penalty']
        cost_m1 += setup_time(current_colour_m1, order["Colour"]) if current_colour_m1 else 0

        time_to_finish_m2 = current_time_m2 + processing_time(index, 1)
        lateness_m2 = max(0, time_to_finish_m2 - order['Deadline'])
        cost_m2 = lateness_m2 * order['Penalty']
        cost_m2 += setup_time(current_colour_m2, order["Colour"]) if current_colour_m2 else 0

        time_to_finish_m3 = current_time_m3 + processing_time(index, 2)
        lateness_m3 = max(0, time_to_finish_m3 - order['Deadline'])
        cost_m3 = lateness_m3 * order['Penalty']
        cost_m3 += setup_time(current_colour_m3, order["Colour"]) if current_colour_m3 else 0
        
        if cost_m1 < min_cost:
            min_cost = cost_m1
            best_order = index
            best_machine = "M1"
        if cost_m2 < min_cost:
            min_cost = cost_m2
            best_order = index
            best_machine = "M2"
        if cost_m3 < min_cost:
            min_cost = cost_m3
            best_order = index
            best_machine = "M3"
    return best_order, best_machine

# Lijst om iteratieresultaten op te slaan
results = []

# Tabu Search
# wat moet ik doen:
# zorgen dat slechtere keuzes geacepteerd worden als er geen betere buren zijn.
# lijst aanmaken dat hij niet terug kan gaan.
# 7 keer tabu (niet terugkeren naar zijn vorrige pad) en dan mag het weer.
# Allereerst: welke buurruimtestructuur ga je toepassen? 
# Oftewel: welke kleine aanpassingen aan je huidige oplossing ga je overwegen.
# het begint vanuit het punt dat ik heb gekregen
# mijn algoritme stopt pas als al mijn iteraties gedaan zijn. 
# Dus daar moet ik een hoog nummer voor kiezen = 424242424224
# Het algoritme bepaald de beste optie die niet tabu is. (met een slechtere doelfuntie)

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Variabelen voor tabu search
tabu_list = []
tabu_size = 7
best_solution = None
best_cost = float('inf')

# Aantal iteraties (stel een hoge waarde in zoals je aangaf)
Aantal_iteraties = 424242424224

# Start de tijdmeting
start_time = time.time()

# Hoofdloop voor iteraties
try:
    for iteration in range(Aantal_iteraties):
        logging.info(f"Iteratie {iteration + 1} van {Aantal_iteraties}")
        
        # Nearest neighbor keuze voor de volgende order
        next_order_idx, best_machine = nearest_neighbor(current_time_m1, current_time_m2, current_time_m3, available_orders, current_colour_m1, current_colour_m2, current_colour_m3)
        
        if next_order_idx in tabu_list:
            logging.info(f"Order {next_order_idx} is tabu, overslaan...")
            continue  # sla over als deze oplossing tabu is
        
        if next_order_idx is not None:
            next_order = available_orders.loc[next_order_idx]

            # Probeer de verwerking voor de gekozen machine
            try:
                if best_machine == "M1":
                    setup = setup_time(current_colour_m1, next_order["Colour"])
                    processing = processing_time(next_order_idx, 0)
                    start_time_order = current_time_m1 + setup
                    finish_time = start_time_order + processing
                    lateness = max(0, finish_time - next_order['Deadline'])
                    current_time_m1 = finish_time
                    current_colour_m1 = next_order["Colour"]

                elif best_machine == "M2":
                    setup = setup_time(current_colour_m2, next_order["Colour"])
                    processing = processing_time(next_order_idx, 1)
                    start_time_order = current_time_m2 + setup
                    finish_time = start_time_order + processing
                    lateness = max(0, finish_time - next_order['Deadline'])
                    current_time_m2 = finish_time
                    current_colour_m2 = next_order["Colour"]

                else:  # best_machine == "M3":
                    setup = setup_time(current_colour_m3, next_order["Colour"])
                    processing = processing_time(next_order_idx, 2)
                    start_time_order = current_time_m3 + setup
                    finish_time = start_time_order + processing
                    lateness = max(0, finish_time - next_order['Deadline'])
                    current_time_m3 = finish_time
                    current_colour_m3 = next_order["Colour"]

                # Bereken de kosten voor de huidige oplossing
                current_cost = lateness * next_order['Penalty']

                # Update de beste oplossing als de huidige beter is
                if current_cost < best_cost:
                    logging.info(f"Nieuwe beste oplossing gevonden met kosten: {current_cost}")
                    best_cost = current_cost
                    best_solution = {
                        "Order": next_order['Order'],
                        "Machine": best_machine,
                        "Start Time": start_time_order,
                        "Finish Time": finish_time,
                        "Colour": next_order['Colour'],
                        "Setup Time": setup,
                        "Processing Time": processing,
                        "Lateness": lateness,
                        "Penalty Cost": current_cost
                    }

                # Voeg de huidige oplossing toe aan de resultaten
                results.append({
                    "Order": next_order['Order'],
                    "Machine": best_machine,
                    "Start Time": start_time_order,
                    "Finish Time": finish_time,
                    "Colour": next_order['Colour'],
                    "Setup Time": setup,
                    "Processing Time": processing,
                    "Lateness": lateness,
                    "Penalty Cost": current_cost
                })

                # Verwijder de geplande order uit de beschikbare orders
                available_orders.drop(next_order_idx, inplace=True)

                # Voeg de oplossing toe aan de tabu-lijst
                tabu_list.append(next_order_idx)

                # Beperk de grootte van de tabu-lijst
                if len(tabu_list) > tabu_size:
                    tabu_list.pop(0)

            except Exception as e:
                logging.error(f"Fout tijdens verwerken van order {next_order_idx}: {str(e)}")
                raise

except Exception as e:
    logging.error(f"Algoritme gestopt vanwege een fout: {str(e)}")

# Eindtijd en duur berekenen
end_time = time.time()
elapsed_time = end_time - start_time
logging.info(f"Het algoritme duurde {elapsed_time:.2f} seconden om te runnen.")

# Print de beste oplossing en de looptijd
print("Beste oplossing:", best_solution)
print("Beste kosten:", best_cost)
print(f"Het algoritme heeft {elapsed_time:.2f} seconden geduurd.")
