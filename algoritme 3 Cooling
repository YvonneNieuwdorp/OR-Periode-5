import pandas as pd
import numpy as np
import scipy.stats as sp
import matplotlib.pyplot as plt
import time
import logging
import random
import math
import matplotlib.patches as mpatches
import pandas as pd

# Load the data
Orders = pd.read_excel('PaintShop - September 2024.xlsx', sheet_name='Orders')
Machines = pd.read_excel('PaintShop - September 2024.xlsx', sheet_name='Machines')
Setups = pd.read_excel('PaintShop - September 2024.xlsx', sheet_name='Setups')

# Initialize variables
current_time_m1 = 0
current_time_m2 = 0
current_time_m3 = 0
current_colour_m1 = None
current_colour_m2 = None
current_colour_m3 = None
scheduled_orders = []
available_orders = Orders.copy()

def processing_time(ordernumber, number_of_machine):
    """ Functie die de processing time berekent
    Parameters: 
        - ordernummer, als een int
        - machine die gebruikt wordt, als een int
    Output: de tijd die nodig is om de order uit te voeren/processingtime
    """
    return Orders.loc[ordernumber, 'Surface'] / Machines.loc[number_of_machine, 'Speed']

def setup_time(prev_colour, new_colour):
    """ Geeft de setuptime aan
    Parameters
        - previous color als een string
        - new color als een string
    Output: setup_time
    """
    result = Setups.loc[(Setups['From colour'] == prev_colour) & (Setups['To colour'] == new_colour), 'Setup time']
    if not result.empty:
        return result.values[0]
    else:
        return 0 

def total_distance(locations, tour):
    """Bereken de totale afstand van een tour langs alle locaties"""
    totalDistance = 0
    for i in range(len(tour)):
        fromLocation = locations[tour[i]]
        toLocation = locations[tour[(i + 1) % len(tour)]]
        totalDistance += euclidean_distance(fromLocation, toLocation)
    return totalDistance

def euclidean_distance(point1, point2):
    """Euclidische afstand tussen twee punten"""
    x1, y1 = point1
    x2, y2 = point2
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

# Parameters for simulated annealing
initial_temperature = 1000
cooling_rate = 0.995
iterations_per_temperature = 1000

def simulated_annealing(locations, tour, temperature, cooling_rate, iterations_per_temp):
    """Simulated annealing functie"""
    current_tour = tour
    best_tour = tour
    current_distance = total_distance(locations, current_tour)
    best_distance = current_distance
    
    while temperature > 1e-3:
        for _ in range(iterations_per_temp):
            # Generate a neighboring solution by swapping two random cities
            i, j = random.sample(range(len(tour)), 2)
            neighbor_tour = current_tour[:]
            neighbor_tour[i], neighbor_tour[j] = neighbor_tour[j], neighbor_tour[i]
            neighbor_distance = total_distance(locations, neighbor_tour)
            
            # Decide whether to accept the neighbor solution
            delta = neighbor_distance - current_distance
            if delta < 0 or random.random() < math.exp(-delta / temperature):
                current_tour = neighbor_tour
                current_distance = neighbor_distance
            
            # Update the best solution if necessary
            if current_distance < best_distance:
                best_tour = current_tour
                best_distance = current_distance
        
        # Cool the temperature
        temperature *= cooling_rate
        
    return best_tour, best_distance

def calculate_cost(order, current_time, current_colour, machine_index):
    """Calculate the cost of processing a given order on a specified machine."""
    time_to_finish = current_time + processing_time(order.name, machine_index)
    lateness = max(0, time_to_finish - order['Deadline'])
    cost = lateness * order['Penalty'] + setup_time(current_colour, order["Colour"]) if current_colour else 0
    return cost, time_to_finish

def nearest_neighbor(current_time_m1, current_time_m2, current_time_m3, available_orders, current_colour_m1, current_colour_m2, current_colour_m3):
    """Finds the next order and machine with the minimum processing cost."""
    best_order = None
    best_machine = None
    min_cost = float('inf')

    for index, order in available_orders.iterrows(): 
        cost_m1, time_m1 = calculate_cost(order, current_time_m1, current_colour_m1, 0)
        cost_m2, time_m2 = calculate_cost(order, current_time_m2, current_colour_m2, 1)
        cost_m3, time_m3 = calculate_cost(order, current_time_m3, current_colour_m3, 2)
        
        if cost_m1 < min_cost:
            min_cost = cost_m1
            best_order = index
            best_machine = "M1"
        if cost_m2 < min_cost:
            min_cost = cost_m2
            best_order = index
            best_machine = "M2"
        if cost_m3 < min_cost:
            min_cost = cost_m3
            best_order = index
            best_machine = "M3"
    
    return best_order, best_machine


# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Variabelen voor tabu search
tabu_list = []
tabu_size = 3
best_solution = None
best_cost = float('inf')

# Aantal iteraties
Aantal_iteraties = 100

# Lijst om resultaten van alle orders bij te houden
results1 = []
results2 = []

# Start de tijdmeting
start_time = time.time()

# Hoofdloop voor iteraties met simulated annealing
try:
    for iteration in range(Aantal_iteraties):
        logging.info(f"Iteratie {iteration + 1} van {Aantal_iteraties}")
        
        # Nearest neighbor keuze voor de volgende order
        next_order_idx, best_machine = nearest_neighbor(current_time_m1, current_time_m2, current_time_m3, available_orders, current_colour_m1, current_colour_m2, current_colour_m3)
        
        if next_order_idx in tabu_list:
            logging.info(f"Order {next_order_idx} is tabu, overslaan...")
            continue  # sla over als deze oplossing tabu is
        
        if next_order_idx is not None:
            next_order = available_orders.loc[next_order_idx]

            # Probeer de verwerking voor de gekozen machine
            try:
                if best_machine == "M1":
                    setup = setup_time(current_colour_m1, next_order["Colour"])
                    processing = processing_time(next_order_idx, 0)
                    start_time_order = current_time_m1 + setup
                    finish_time = start_time_order + processing
                    lateness = max(0, finish_time - next_order['Deadline'])
                    current_time_m1 = finish_time
                    current_colour_m1 = next_order["Colour"]

                elif best_machine == "M2":
                    setup = setup_time(current_colour_m2, next_order["Colour"])
                    processing = processing_time(next_order_idx, 1)
                    start_time_order = current_time_m2 + setup
                    finish_time = start_time_order + processing
                    lateness = max(0, finish_time - next_order['Deadline'])
                    current_time_m2 = finish_time
                    current_colour_m2 = next_order["Colour"]

                else:  # best_machine == "M3":
                    setup = setup_time(current_colour_m3, next_order["Colour"])
                    processing = processing_time(next_order_idx, 2)
                    start_time_order = current_time_m3 + setup
                    finish_time = start_time_order + processing
                    lateness = max(0, finish_time - next_order['Deadline'])
                    current_time_m3 = finish_time
                    current_colour_m3 = next_order["Colour"]

                # Bereken de kosten voor de huidige oplossing
                current_cost = lateness * next_order['Penalty']
                
                # Bepaal of we de huidige oplossing accepteren
                accept_solution = False
                if current_cost < best_cost:
                    accept_solution = True
                else:
                    # Bereken een kans om een slechtere oplossing te accepteren
                    temperature = initial_temperature * (cooling_rate ** iteration)
                    probability = np.exp(-(current_cost - best_cost) / temperature)
                    if np.random.rand() < probability:
                        accept_solution = True
                
                # Update de beste oplossing als deze geaccepteerd wordt
                if accept_solution:
                    logging.info(f"Nieuwe beste oplossing gevonden met kosten: {current_cost}")
                    best_cost = current_cost
                    scheduled_orders.append(next_order_idx)
                    tabu_list.append(next_order_idx)
                    best_solution = {
                        "Order": next_order['Order'],
                        "Machine": best_machine,
                        "Start Time": start_time_order,
                        "Finish Time": finish_time,
                        "Colour": next_order['Colour'],
                        "Setup Time": setup,
                        "Processing Time": processing,
                        "Lateness": lateness,
                        "Penalty Cost": current_cost
                    }
                    if len(tabu_list) > tabu_size:
                        tabu_list.pop(0)
                
                # Verwijder de geplande order uit de beschikbare orders
                available_orders.drop(next_order_idx, inplace=True)

                # Voeg de oplossing toe aan de tabu-lijst
                tabu_list.append(next_order_idx)

                # Verwijder de gekozen order uit de beschikbare orders
                available_orders = available_orders.drop(next_order_idx)
                results2.append((next_order_idx, finish_time, lateness, current_cost))

                # Na het plannen van een order
                results1.append({
                    'Iteration': iteration,
                    'Order': next_order['Order name'],
                    'Machine': best_machine,
                    'Start Time': start_time_order,
                    'Finish Time': finish_time,
                    'Lateness': lateness,
                    'Penalty Cost': current_cost,
                    'Colour': next_order['Colour'],  # Voeg de kleur van de order toe
                    'Setup Time': setup,  # Opslaan van de setup-tijd
                    'Processing Time': processing  # Opslaan van de verwerkingstijd
                })

            except Exception as e:
                logging.error(f"Fout bij het verwerken van order {next_order_idx}: {e}")
                continue

except Exception as e:
    logging.error(f"Fout bij de iteraties: {e}")

# Print de resultaten
print(f"Beste oplossing na {Aantal_iteraties} iteraties: {best_solution}, Kosten: {best_cost}")

# Debugging: print results1 om te controleren of er resultaten zijn
print(f"dit is results1:{results1}")

# Eindtijd en duur berekenen
end_time = time.time()
elapsed_time = end_time - start_time
logging.info(f"Het algoritme duurde {elapsed_time:.2f} seconden om te runnen.")

# Print de beste oplossing en de looptijd
print("Beste oplossing:", best_solution)
print("Beste kosten:", best_cost)
print(f"Het algoritme heeft {elapsed_time:.2f} seconden geduurd.")

# Converteer de lijst met resultaten naar een DataFrame
results_df = pd.DataFrame(results1)

# Bereken de totale penalty costs
total_penalty_cost = results_df['Penalty Cost'].sum()
print("Totale Penalty Cost:", total_penalty_cost)

# Print de DataFrame met de resultaten
print("Resultaten van de orders:")
print(results_df)

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

def plot_gantt_chart(schedule_df):
    """Visualize the scheduling process using a Gantt chart with setup and processing times indicated separately.
    
    Parameters:
        schedule_df: DataFrame with columns 'Machine', 'Order', 'Start Time', 'Finish Time', 'Colour', 'Setup Time', and 'Processing Time'.
    """
    fig, ax = plt.subplots(figsize=(12, 6))
    colours = {
        "Red": "red",
        "Blue": "blue",
        "Green": "green",
        "Yellow": "yellow",
        "Setup": "grey"  # Color for setup time
    }

    # Adding bars for each order on their respective machines
    for idx, row in schedule_df.iterrows():
        machine = row["Machine"]
        start = row["Start Time"]
        setup_duration = row["Setup Time"]
        processing_duration = row["Processing Time"]
        order_colour = row["Colour"]
        order_name = row["Order"]

        # Index for the machine position
        machine_idx = {"M1": 0, "M2": 1, "M3": 2}[machine]

        # Setup time bar
        ax.barh(machine_idx, setup_duration, left=start, color=colours["Setup"], edgecolor='black', label='Setup' if idx == 0 else "")
        
        # Processing time bar
        ax.barh(machine_idx, processing_duration, left=start + setup_duration, color=colours[order_colour], edgecolor='black', label=order_name if idx == 0 else "")
        
        # Add annotations
        ax.text(start + setup_duration + processing_duration / 2, machine_idx, order_name, ha='center', va='center', color='black')

    # Setting the y-ticks to be the machine names
    ax.set_yticks(range(len(schedule_df["Machine"].unique())))
    ax.set_yticklabels(schedule_df["Machine"].unique())
    
    # Labeling the axes
    ax.set_xlabel('Time')
    ax.set_title('Gantt Chart for Order Scheduling')
    
    # Create a legend with unique entries
    handles, labels = ax.get_legend_handles_labels()
    by_label = dict(zip(labels, handles))
    ax.legend(by_label.values(), by_label.keys())

    plt.show()

# Call the plot function with the results DataFrame
plot_gantt_chart(results_df)


# Call the function to plot the Gantt chart
plot_gantt_chart(results_df)

# Debugging: print results1 om te controleren of er resultaten zijn
print(results1)

# Visualisatie
if not results1.empty:
    plot_gantt_chart(results1)
else:
    print("Er zijn geen resultaten om te plotten.")


